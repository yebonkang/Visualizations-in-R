aa[[1]]
aa[["Name"]]
aa[1]
aa[2]
a[[2]] <- NULL
aa[[2]] <- NULL
aa
bb=unlist(aa)
bb
str(aa)
str(bb)
aa=matrix(c(1,2,3,4,5,6),3,2)
aa
bb=matrix(c(1,2,3,4,5,6),3,2, byrow=T)
bb
bb[1,]
bb[,2]
bb[1,2]
dim(aa)
colnames(bb)
colnames(bb) = c("Col_1", "Col_2")
rownames(bb) = c("Row_A", "Row_B", "Row_C")
bb
cc=t(bb)
cc
dd=array(1:24,c(3,2,4))
dd
dim(dd)
names=c("Samsung","Daewoo","LG")
scores=c(95,90,85)
ee=data.frame(names,scores)
ee
ee$address = c("강남","용산","여의도")
ee
sales=c(1000,2000,3000)
ff=cbind(ee, sales)
ff
iris
head(iris)
fix(iris)
dim(iris)
str(iris)
levels(iris$Species)
summary(iris)
names=c("Samsung","Daewoo","LG","SK")
sales=c(100,200,300,NA)
asset=c(5000,1000,NA,NA)
dd=data.frame(names,sales,asset)
dd
is.na(dd)
table(is.na(dd))
ee=na.omit(dd)
dd
ee
complete.cases(dd)
dd[is.na(dd)]
dd[!is.na(dd)]
dd[is.na(dd),]
dd[!is.na(dd),]
dd
dd[is.na(dd)] = 0
dd
return(temp_c)
temp_c <- (temp_f - 32) * 5 / 9
f_to_c <- function(temp_f){
return ((temp_f - 32) * 5 / 9)
}
f_to_c(32)
fahrenheit_to_celsius <- function(temp_F) {
temp_C <- (temp_F - 32) * 5 / 9
return (temp_C)
}
return (temp_c)
f_to_c <- function(temp_f) {
temp_c <- (temp_f - 32) * 5 / 9
return (temp_c)
}
return(temp_k)
c_to_k <- function(temp_c) {
temp_k <- temp_c + 273.15
return(temp_k)
}
c_to_k(0)
c_to_k(f_to_c(32))
getwd()
setwd("~/R/Intro-to-R")
animals <- read.csv("data/animals.csv")
animals
mode(animals)
animals <- as.data.frame(animals)
mode(animals)
type(animals)
str(animals)
nrow(animals)
ncol(animals)
class(animals)
colnames(animals)
library(dplyr)
animals %>% filter(speed == 40)
animals[animals$speed==40,]
animals[1,1]
animals[animals$speed==40,1]
animals[animals$color==Tan,]
animals[animals$color=="Tan",]
animals[animals$speed > 50, animals$color]
animals[animals$speed > 50, color]
animals[animals$speed > 50, c("color")]
class(animals[animals$speed > 50, c("color")])
?drop
animals[animals$speed > 50, c("color"),as.data.frame=T]
animals[animals$color=="Grey",c("color")] <- "Gray"
animals
animals[animals$color=="Grey","color"] <- "Gray"
animals %>% filter(color=="Grey") %>%
select(color) <- "Gray"
animals %>%
mutate(color=replace(color,color=="Gray", "Grey"))
animals <- read.csv("data/animals.csv")
animals
animals %>%
mutate(color = replace(color,color=="Gray", "Grey"))
animals <- animals %>%
mutate(color = replace(color,color=="Gray", "Grey"))
animals_list <- list(animals$speed, animals$color)
animals_list
names(animals_list) <- c("speed", "color")
animals_list
names(animals_list) <- colnames(animals)
animals_list
animals[color =="Gray",] <- "Grey"
animals[animals$color =="Gray",] <- "Grey"
proj_summary <- read.table("data/project-summary.txt")
proj_summary
rownames(proj_summary)
colnames(proj_summary)
proj_summary <- read.table("data/project-summary.txt",header=T)
colnames(proj_summary)
rownames(proj_summary)
proj_summary <- read.table("data/project-summary.txt",header=T,row.names=1)
rownames(proj_summary)
proj_summary
proj_summary
proj_summary <- read.table("data/project-summary.txt",header=T)
proj_summary
proj_summary <- read.table("data/project-summary.txt",header=T,row.names=1)
rownames(proj_summary)
ctrl_samples <- data.frame(row.names = c("sample3", "sample10", "sample8", "sample4", "sample15"), date = c("01/13/2018", "03/15/2018", "01/13/2018", "09/20/2018","03/15/2018"))
colnames(proj_summary)
ctrl_samples
rownames(ctrl_samples) %in% rownames(proj_summary)
ctrl_samples[rownames(ctrl_samples) %in% rownames(proj_summary),]
ctrl_samples[rownames(ctrl_samples) %in% rownames(proj_summary),]
len(ctrl_samples[rownames(ctrl_samples) %in% rownames(proj_summary),])
nrow(ctrl_samples[rownames(ctrl_samples) %in% rownames(proj_summary),])
length(ctrl_samples[rownames(ctrl_samples) %in% rownames(proj_summary),])
proj_summary_ctrl <- proj_summary[rownames(ctrl_samples) %in% rownames(proj_summary),]
proj_summary_ctrl
nrow(proj_summary_ctrl)
proj_summary_ctrl <- proj_summary[which(rownames(ctrl_samples) %in% rownames(proj_summary)),]
nrow(proj_summary_ctrl)
View(proj_summary)
View(proj_summary_ctrl)
View(ctrl_samples)
proj_summary_ctrl <- proj_summary[rownames(ctrl_samples) %in% rownames(proj_summary),]
which(
proj_summary_ctrl <- proj_summary[which(rownames(ctrl_samples) %in% rownames(proj_summary)),]
proj_summary_ctrl <- proj_summary[which(rownames(ctrl_samples) %in% rownames(proj_summary)),]
nrow(proj_summary_ctrl)
proj_summary_ctrl <- proj_summary[rownames(ctrl_samples) %in% rownames(proj_summary),]
length(ctrl_samples[rownames(ctrl_samples) %in% rownames(proj_summary),])
length(which(rownames(ctrl_samples) %in% rownames(proj_summary)))
length(rownames(ctrl_samples) %in% rownames(proj_summary))
proj_summary_ctrl <- proj_summary[which(rownames(ctrl_samples) %in% rownames(proj_summary)),]
nrow(proj_summary_ctrl)
proj_summary_ctrl
proj_summary_ctrl <- proj_summary[which(rownames(proj_summary) %in% rownames(ctrl_samples)),]
m <- match(rownames(proj_summary_ctrl), rownames(ctrl_samples))
m
rownames(proj_summary_ctrl)
proj_summary_ctrl <- cbind(proj_summary_ctrl,ctrl_samples)
proj_summary_ctrl <- cbind(proj_summary_ctrl,batch=ctrl_samples[m,])
str(proj_summary$treatment)
summary(proj_summary$treatment)
mode(proj_summary$treatment)
dim(proj_summary$treatment)
table(proj_summary$treatment)
proj_summary_noctl <- subset(proj_summary, proj_summary$treatment == "high" or "low")
proj_summary_noctl <- subset(proj_summary, proj_summary$treatment == "high" | "low")
proj_summary_noctl <- subset(proj_summary, proj_summary$treatment == "high" | proj_summary$treatment == "low")
table(proj_summary$Quality_format)
library(tidyverse)
?map_lgl
proj_summary_noctl <- subset(proj_summary_noctl,map_lgl(map_lgl, is.numeric()))
proj_summary_noctl <- subset(proj_summary_noctl,map_lgl(map_lgl, is.numeric)
proj_summary_noctl <- subset(proj_summary_noctl,map_lgl(map_lgl, is.numeric))
proj_summary_noctl <- subset(proj_summary_noctl,map_lgl(map_lgl, is.numeric))
keep <- map_lgl(proj_summary_noctl, is.numeric)
keep
proj_summary_noctl <- proj_summary_noctl[,keep]
View(proj_summary_noctl)
animals
animals$animal_names <- row.names(animals)
animals
library(ggplot2)
ggplot(data=animals,aes(x=animal_names, y=speed)) +
geom_point()
ggplot(data=animals,aes(x=animal_names, y=speed)) +
geom_point() +
theme_light()
ggplot(data=animals,aes(x=animal_names, y=speed)) +
geom_point() +
theme_bw()
ggplot(data=animals,aes(x=animal_names, y=speed)) +
geom_point(fill="purple") +
theme_bw()
ggplot(data=animals,aes(x=animal_names, y=speed)) +
geom_point(color="purple") +
theme_bw()
ggplot(data=animals,aes(x=animal_names, y=speed)) +
geom_point(color="purple") +
theme_bw() +
labs(x="Animal",y="Speed(km/h)")
ggplot(data=animals,aes(x=animal_names, y=speed)) +
geom_point(color="purple") +
theme_bw() +
labs(x="Animal",y="Speed(km/h)",title="Speed Comparisons Between Animals")
ggplot(data=animals,aes(x=animal_names, y=speed)) +
geom_point(color="purple") +
labs(x="Animal",y="Speed(km/h)",title="Speed Comparisons Between Animals") +
theme_bw() +
theme(plot.title=element_text(hjust=0.5))
ggplot(data=animals,aes(x=animal_names, y=speed)) +
geom_point(color="purple") +
labs(x="Animal",y="Speed(km/h)",title="Speed Comparisons Between Animals") +
theme(plot.title=element_text(hjust=0.5))
theme_bw() +
ggplot(data=animals,aes(x=animal_names, y=speed)) +
geom_point(color="purple") +
labs(x="Animal",y="Speed(km/h)",title="Speed Comparisons Between Animals") +
theme_bw() +
theme(plot.title=element_text(hjust=0.5))
animals <- animals[order(animals$speed),]
animals
?reorder
reorder(animal_names)
animal[reorder(animal_names),]
animals[reorder(animal_names),]
animals <- with(animals,reorder(animal_names,speed))
animals
str(animals)
ggplot(data=animals,aes(x=animal_names, y=speed)) +
geom_point(color="purple") +
labs(x="Animal",y="Speed(km/h)",title="Speed Comparisons Between Animals") +
theme_bw() +
theme(plot.title=element_text(hjust=0.5))
ggplot(data=animals,aes(x=animal_names, y=speed)) +
geom_point(color="purple") +
labs(x="Animal",y="Speed(km/h)",title="Speed Comparisons Between Animals") +
theme_bw() +
theme(plot.title=element_text(hjust=0.5))
animals
animals <- read.csv("data/animals.csv")
animal_names <- with(animals,reorder(animal_names,speed))
animals$animal_names <- row.names(animals)
animal_names <- with(animals,reorder(animal_names,speed))
View(animals)
animals$animal_names <- with(animals,reorder(animal_names,speed))
View(animals)
ggplot(data=animals,aes(x=animal_names, y=speed)) +
geom_point(color="purple") +
labs(x="Animal",y="Speed(km/h)",title="Speed Comparisons Between Animals") +
theme_bw() +
theme(plot.title=element_text(hjust=0.5))
View(animals)
str(animals)
animals$animal_names
?rep
rep(1:4, 2)
ggplot(data=animals,aes(x=animal_names, y=speed)) +
geom_point(color="purple") +
labs(x="Animal",y="Speed(km/h)",title="Speed Comparisons Between Animals") +
theme_bw() +
theme(plot.title=element_text(hjust=0.5))
rep(1:4, each = 2)       # not the same.
rep(1:4, c(2,2,2,2))     # same as second.
rep(1:4, c(2,1,2,1))
?rep
sex <- rep(c("M","F"),times=6)
sex
stage <- rep(c("I","II","III"),times=4)
treatment <- rep(c("A","B","P"), each=4)
treatment
myc <- c(2343,457,4593,9035,3450,3524,958,1053,8674,3424,463,5105)
?paste
paste0(1:12)
paste(1:12)        # same
(nth <- paste0(1:12, c("st", "nd", "rd", rep("th", 9))))
paste(month.abb, "is the", nth, "month of the year.")
meta <- data.frame(sex, stage, treatment, myc, row.names=paste("sample", 1:12))
meta
meta <- data.frame(sex, stage, treatment, myc, row.names=paste("sample", 1:12, sep=""))
meta
meta[meta$treatment & meta$sex,]
meta[,meta$treatment & meta$sex]
meta[,c("treatment", "sex")]
meta[c(5,7,9,10),c("treatment")]
meta[,-"treatment"]
meta[,-c("treatment")]
meta[,-meta$treatment]
col.names(met)
colnames(met)
colnames(meta)
meta[,-3]
meta[-c(7,8,9),]
meta[1:6,]
pre_treatment <- c(T, F, F, F, T, T, F, T, F, F, T, T)
cbind(meta,pre_treatment)
colnames(meta) <- c(“A”, “B”, “C”, “D”)
colnames(meta)
colnames(meta) <- c(“A”, “B”, “C”, “D”)
colnames(meta) <- c("A", "B", "C", "D")
meta
stage <- rep(c("I","II"),c(1,2))
meta <- data.frame(sex, stage, treatment, myc, row.names=paste("sample", 1:12, sep=""))
pre_treatment <- c(T, F, F, F, T, T, F, T, F, F, T, T)
cbind(meta,pre_treatment)
colnames(meta) <- c("A", "B", "C", "D")
meta
list_three <- list(pre_treatment, meta, meta$stage)
list_three
list_three <- list(pre_treatment, meta, meta$B)
list_three
list_three[[2]]
list_three[2]
list_three[[2]][1,4]
list[[3]]
list_three[[3]]
Filter(list_three[[3]],"I")
?filter
list_three %>%
filter("I")
names(list_three) <- c("pre_treatment","meta","stage")
list_three
?read.delim
counts_meta <- read.delim("data/Mov10_full_meta.txt",header = T, sep="/t", row.names=1)
counts_meta <- read.delim("data/Mov10_full_meta.txt",header = T, sep="\t", row.names=1)
count_meta
View(counts_meta)
data <- read.delim("data/normalized_counts.txt",header = T, sep="\t", row.names=1)
data
head(data)
head(counts_meta)
head(counts_meta)
head(data)
expression <- data["MOV10",]
expression
class(expression)
expression <- as.numeric(expression)
class(expression)
counts_meta
head(counts_meta)
expression
nrow(counts_meta)
df <- cbind(counts_meta,expression)
df
colnames(df)
ggplot(data=df) +
geom_jitter(aes(x=sample,y=expression), color=sample) +
theme_bw() +
label(title="Expression of MOV10",x=NULL, y="Normalized counts") +
theme(legend.position = NULL,
plot.title=element_text(rel(1.5), hjust=0.5),
axis.title=element_text(rel(1.5)),
axis.text.y = element_text(rel(1.25)),
axis.text.x=element_text(angle=45, hjust=1))
ggplot(data=df) +
geom_jitter(aes(x=sample,y=expression), color=sample) +
theme_bw() +
labs(title="Expression of MOV10",x=NULL, y="Normalized counts") +
theme(legend.position = NULL,
plot.title=element_text(rel(1.5), hjust=0.5),
axis.title=element_text(rel(1.5)),
axis.text.y = element_text(rel(1.25)),
axis.text.x=element_text(angle=45, hjust=1))
ggplot(data=df) +
geom_jitter(aes(x=sample,y=expression), color=sample) +
theme_bw() +
labs(title="Expression of MOV10",x=NULL, y="Normalized counts") +
theme(legend.position = NULL,
plot.title=element_text(rel(1.5), hjust=0.5),
axis.title=element_text(rel(1.5)),
axis.text.y = element_text(rel(1.25)),
axis.text.x=element_text(angle=45, hjust=1))
rlang::last_error()
colnames(df)
ggplot(data=df) +
geom_jitter(aes(x=sampletype,y=expression), color=sample) +
theme_bw() +
labs(title="Expression of MOV10",x=NULL, y="Normalized counts") +
theme(legend.position = NULL,
plot.title=element_text(rel(1.5), hjust=0.5),
axis.title=element_text(rel(1.5)),
axis.text.y = element_text(rel(1.25)),
axis.text.x=element_text(angle=45, hjust=1))
ggplot(data=df) +
geom_jitter(aes(x=sampletype,y=expression), color=sampletype) +
theme_bw() +
labs(title="Expression of MOV10",x=NULL, y="Normalized counts") +
theme(legend.position = NULL,
plot.title=element_text(rel(1.5), hjust=0.5),
axis.title=element_text(rel(1.5)),
axis.text.y = element_text(rel(1.25)),
axis.text.x=element_text(angle=45, hjust=1))
ggplot(data=df) +
geom_jitter(aes(x=sampletype,y=expression), color=sampletype) +
theme_bw() +
labs(title="Expression of MOV10",x=NULL, y="Normalized counts") +
theme(legend.position = NULL,
plot.title=element_text(rel(1.5), hjust=0.5),
axis.title=element_text(rel(1.5)),
axis.text.y = element_text(rel(1.25)),
axis.text.x=element_text(angle=45, hjust=1))
ggplot(data=df) +
geom_jitter(aes(x=sampletype,y=expression), color=sampletype) +
theme_bw() +
labs(title="Expression of MOV10",x=NULL, y="Normalized counts") +
theme(legend.position = NULL,
plot.title=element_text(rel(1.5), hjust=0.5),
axis.title=element_text(rel(1.5)),
axis.text.y = element_text(rel(1.25)),
axis.text.x=element_text(angle=45, hjust=1))
ggplot(data=df) +
geom_jitter(aes(x=sampletype,y=expression, color=sampletype)) +
theme_bw() +
labs(title="Expression of MOV10",x=NULL, y="Normalized counts") +
theme(legend.position = NULL,
plot.title=element_text(rel(1.5), hjust=0.5),
axis.title=element_text(rel(1.5)),
axis.text.y = element_text(rel(1.25)),
axis.text.x=element_text(angle=45, hjust=1))
ggplot(data=df) +
geom_jitter(aes(x=sampletype,y=expression, color=sampletype)) +
theme_bw() +
labs(title="Expression of MOV10",x=NULL, y="Normalized counts") +
theme(legend.position = None,
plot.title=element_text(rel(1.5), hjust=0.5),
axis.title=element_text(rel(1.5)),
axis.text.y = element_text(rel(1.25)),
axis.text.x=element_text(angle=45, hjust=1))
ggplot(data=df) +
geom_jitter(aes(x=sampletype,y=expression, color=sampletype)) +
theme_bw() +
labs(title="Expression of MOV10",x=NULL, y="Normalized counts") +
theme(legend.position = Nnne,
plot.title=element_text(rel(1.5), hjust=0.5),
axis.title=element_text(rel(1.5)),
axis.text.y = element_text(rel(1.25)),
axis.text.x=element_text(angle=45, hjust=1))
ggplot(data=df) +
geom_jitter(aes(x=sampletype,y=expression, color=sampletype)) +
theme_bw() +
labs(title="Expression of MOV10",x=NULL, y="Normalized counts") +
theme(legend.position = none,
plot.title=element_text(rel(1.5), hjust=0.5),
axis.title=element_text(rel(1.5)),
axis.text.y = element_text(rel(1.25)),
axis.text.x=element_text(angle=45, hjust=1))
?legend.position
?legend
ggplot(data=df) +
geom_jitter(aes(x=sampletype,y=expression, color=sampletype)) +
theme_bw() +
labs(title="Expression of MOV10",x=NULL, y="Normalized counts") +
theme(legend.position = "none",
plot.title=element_text(rel(1.5), hjust=0.5),
axis.title=element_text(rel(1.5)),
axis.text.y = element_text(rel(1.25)),
axis.text.x=element_text(angle=45, hjust=1))
install("biomaRt")
install.packages("biomaRt")
meta_tb <- as.tibble(meta)
meta
meta_tb
meta
meta_tb <- as.tibble(meta,rownames_to_column)
meta_tb
meta_tb <- meta %>%
rownames_to_column() %>%
as.tibble
meta_tb
meta_tb <- meta %>%
rownames_to_column() %>%
as.tibble()
meta_tb
meta_tb <- meta %>%
rownames_to_column(var = "sample") %>%
as.tibble()
meta_tb
meta_tb <- rename(meta_tb, c("sex","stage","treatment","myc"))
meta_tb <- rename(colnames(meta), c("sex","stage","treatment","myc"))
meta_tb <- meta_tb %>%
rename(sex=A,
stage=B,
treatment=C,
myc=D)
meta_tb
meta_tb %>%
filter(treatment == "P")
meta_tb %>%
select(stage, treatment)
meta_tb %>%
arrange(desc(myc))
